/*
   ESP8266 + FastLED + IR Remote: https://github.com/jasoncoon/esp8266-fastled-webserver
   Copyright (C) 2015-2017 Jason Coon

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

uint8_t coordsX[NUM_LEDS] = {
  255, 254, 252, 249, 244, 238, 231, 222, 213, 202, 191, 179, 167, 154, 141, 128, 114, 101, 88, 76, 64, 53, 42, 33, 24, 17, 11, 6, 3, 1, 0, 1, 3, 6, 11, 17, 24, 33, 42, 53, 64, 76, 88, 101, 114, 128, 141, 154, 167, 179, 191, 202, 213, 222, 231, 238, 244, 249, 252, 254, 239, 238, 235, 231, 224, 216, 206, 195, 183, 170, 156, 142, 128, 113, 99, 85, 72, 60, 49, 39, 31, 24, 20, 17, 16, 17, 20, 24, 31, 39, 49, 60, 72, 85, 99, 113, 128, 142, 156, 170, 183, 195, 206, 216, 224, 231, 235, 238, 223, 222, 218, 213, 205, 195, 184, 171, 157, 142, 128, 113, 98, 84, 71, 60, 50, 42, 37, 33, 32, 33, 37, 42, 50, 60, 71, 84, 98, 113, 128, 142, 157, 171, 184, 195, 205, 213, 218, 222, 
  207, 206, 201, 194, 184, 172, 158, 143, 128, 112, 97, 83, 71, 61, 54, 49, 48, 49, 54, 61, 71, 83, 97, 112, 128, 143, 158, 172, 184, 194, 201, 206, 
  191, 189, 183, 173, 159, 144, 128, 111, 96, 82, 72, 66, 64, 66, 72, 82, 96, 111, 128, 144, 159, 173, 183, 189, 
  175, 172, 161, 146, 128, 109, 94, 83, 80, 83, 94, 109, 128, 146, 161, 172, 
  159, 155, 143, 128, 112, 100, 96, 100, 112, 128, 143, 155,
  143, 139, 128, 116, 112, 116, 128, 139,
  128
};

uint8_t coordsY[NUM_LEDS] = {
  128, 141, 154, 167, 179, 191, 202, 213, 222, 231, 238, 244, 249, 252, 254, 255, 254, 252, 249, 244, 238, 231, 222, 213, 202, 191, 179, 167, 154, 141, 128, 114, 101, 88, 76, 64, 53, 42, 33, 24, 17, 11, 6, 3, 1, 0, 1, 3, 6, 11, 17, 24, 33, 42, 53, 64, 76, 88, 101, 114, 128, 142, 156, 170, 183, 195, 206, 216, 224, 231, 235, 238, 239, 238, 235, 231, 224, 216, 206, 195, 183, 170, 156, 142, 128, 113, 99, 85, 72, 60, 49, 39, 31, 24, 20, 17, 16, 17, 20, 24, 31, 39, 49, 60, 72, 85, 99, 113, 128, 142, 157, 171, 184, 195, 205, 213, 218, 222, 223, 222, 218, 213, 205, 195, 184, 171, 157, 142, 128, 113, 98, 84, 71, 60, 50, 42, 37, 33, 32, 33, 37, 42, 50, 60, 71, 84, 98, 113, 
  128, 143, 158, 172, 184, 194, 201, 206, 207, 206, 201, 194, 184, 172, 158, 143, 128, 112, 97, 83, 71, 61, 54, 49, 48, 49, 54, 61, 71, 83, 97, 112, 
  128, 144, 159, 173, 183, 189, 191, 189, 183, 173, 159, 144, 128, 111, 96, 82, 72, 66, 64, 66, 72, 82, 96, 111, 
  128, 146, 161, 172, 175, 172, 161, 146, 128, 109, 94, 83, 80, 83, 94, 109, 
  128, 143, 155, 159, 155, 143, 128, 112, 100, 96, 100, 112, 
  128, 139, 143, 139, 128, 116, 112, 116,
  128
};

// Params for width and height
const uint8_t kMatrixWidth = 16;
const uint8_t kMatrixHeight = 16;

const uint8_t maxX = kMatrixWidth - 1;
const uint8_t maxY = kMatrixHeight - 1;

uint8_t coordsX16[NUM_LEDS] = {  15, 15, 15, 15, 14, 14, 14, 13, 13, 12, 11, 11, 10, 9, 8, 8, 7, 6, 5, 4, 4, 3, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 3, 4, 4, 5, 6, 7, 8, 8, 9, 10, 11, 11, 12, 13, 13, 14, 14, 14, 15, 15, 15, 14, 14, 14, 14, 13, 13, 12, 11, 11, 10, 9, 8, 8, 7, 6, 5, 4, 4, 3, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 4, 4, 5, 6, 7, 8, 8, 9, 10, 11, 11, 12, 13, 13, 14, 14, 14, 13, 13, 13, 13, 12, 11, 11, 10, 9, 8, 8, 7, 6, 5, 4, 4, 3, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 5, 6, 7, 8, 8, 9, 10, 11, 11, 12, 13, 13, 13, 12, 12, 12, 11, 11, 10, 9, 8, 8, 7, 6, 5, 4, 4, 3, 3, 3, 3, 3, 4, 4, 5, 6, 7, 8, 8, 9, 10, 11, 11, 12, 12, 11, 11, 11, 10, 9, 8, 8, 7, 6, 5, 4, 4, 4, 4, 4, 5, 6, 7, 8, 8, 9, 10, 11, 11, 10, 10, 9, 9, 8, 6, 6, 5, 5, 5, 6, 6, 8, 9, 9, 10, 9, 9, 8, 8, 7, 6, 6, 6, 7, 8, 8, 9, 8, 8, 8, 7, 7, 7, 8, 8  };
uint8_t coordsY16[NUM_LEDS] = { 8, 8, 9, 10, 11, 11, 12, 13, 13, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 14, 14, 14, 13, 13, 12, 11, 11, 10, 9, 8, 8, 7, 6, 5, 4, 4, 3, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 3, 4, 4, 5, 6, 7, 8, 8, 9, 10, 11, 11, 12, 13, 13, 14, 14, 14, 14, 14, 14, 14, 13, 13, 12, 11, 11, 10, 9, 8, 8, 7, 6, 5, 4, 4, 3, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 4, 4, 5, 6, 7, 8, 8, 9, 10, 11, 11, 12, 13, 13, 13, 13, 13, 13, 13, 12, 11, 11, 10, 9, 8, 8, 7, 6, 5, 4, 4, 3, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 5, 6, 7, 8, 8, 9, 10, 11, 11, 12, 12, 12, 12, 12, 11, 11, 10, 9, 8, 8, 7, 6, 5, 4, 4, 3, 3, 3, 3, 3, 4, 4, 5, 6, 7, 8, 8, 9, 10, 11, 11, 11, 11, 11, 10, 9, 8, 8, 7, 6, 5, 4, 4, 4, 4, 4, 5, 6, 7, 8, 9, 9, 10, 10, 10, 9, 9, 8, 6, 6, 5, 5, 5, 6, 6, 8, 8, 9, 9, 9, 8, 8, 7, 6, 6, 6, 7, 8, 8, 8, 8, 8, 7, 7, 7  };

void setPixelXY(uint8_t x, uint8_t y, CRGB color) {
  if (x >= kMatrixWidth || y >= kMatrixHeight)
    return;

  for (uint8_t i = 0; i < NUM_LEDS; i++) {
    if (coordsX16[i] != x)
      continue;

    if (coordsY16[i] != y)
      continue;

    leds[i] = color;
  }
}

// algorithm from http://en.wikipedia.org/wiki/Midpoint_circle_algorithm
void drawCircle(uint8_t x0, uint8_t y0, uint8_t radius, const CRGB color)
{
  int a = radius, b = 0;
  int radiusError = 1 - a;

  if (radius == 0) {
    setPixelXY(x0, y0, color);
    return;
  }

  while (a >= b)
  {
    setPixelXY(a + x0, b + y0, color);
    setPixelXY(b + x0, a + y0, color);
    setPixelXY(-a + x0, b + y0, color);
    setPixelXY(-b + x0, a + y0, color);
    setPixelXY(-a + x0, -b + y0, color);
    setPixelXY(-b + x0, -a + y0, color);
    setPixelXY(a + x0, -b + y0, color);
    setPixelXY(b + x0, -a + y0, color);

    b++;
    if (radiusError < 0)
      radiusError += 2 * b + 1;
    else
    {
      a--;
      radiusError += 2 * (b - a + 1);
    }
  }
}
